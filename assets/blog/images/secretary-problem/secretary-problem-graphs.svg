<?xml version="1.0" encoding="utf-8"?><!--
""" To recover the Python script to generate this SVG, delete the line above -->
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" height="100%" viewBox="-85 -1050 1400 1120">
 <title>secretary problem graphs</title>
 <desc>Graphs of probabilities of getting the best candidate (red circles) and k/n (blue crosses) where k is the sample size for n in [1, 12] by CMG Lee. Data is from http://datagenetics.com/blog/december32012/index.html .</desc>
 <style type="text/css">
  #main { font-family:Helvetica,Arial,sans-serif; font-size:40px; text-anchor:middle;
          fill:#000000; stroke-width:4; stroke:none; cursor:crosshair; }
  text  { stroke:none; cursor:crosshair; }
  .var  { font-style:italic; }
  .k_div_n     { text-anchor:start;  fill:#0000cc; stroke:#0000ff; }
  .probability { text-anchor:middle; fill:#cc0000; stroke:#ff0000; stroke-dasharray:80,16; }
 </style>
 <defs>
<!-- BEGIN_DYNAMIC_DEFS -->

<!--   END_DYNAMIC_DEFS -->
  <pattern id="pattern_grid_1" patternUnits="userSpaceOnUse" width="100" height="100">
   <rect x="0" y="0" width="99999" height="99999" fill="none" stroke="#000000"/>
  </pattern>
  <pattern id="pattern_grid_5" patternUnits="userSpaceOnUse" width="500" height="500">
   <rect x="0" y="0" width="99999" height="99999" fill="url(#pattern_grid_1)" stroke="#000000" stroke-width="2"/>
  </pattern>
  <path id="k_div_n" d="M-10,-10 L10,10 M-10,10 L10,-10"/>
  <circle id="probability" cx="0" cy="0" r="10"/>
 </defs>
 <circle cx="0" cy="0" r="99999" fill="#ffffff"/>
 <g id="main">
  <rect x="0" y="-1000" width="1200" height="1000" fill="url(#pattern_grid_5)" stroke="#000000"/>
  <path d="M0,-368 H1200" stroke="#cc00ff" stroke-dasharray="25,20"/>
  <text transform="translate(33,-330)" x="0" y="0" fill="#cc00ff"
   ><tspan>1</tspan><tspan x="0">_</tspan><tspan x="0" dy="2ex" class="var">e</tspan></text>
  <text class="probability var" transform="translate(750,-650)" x="0" y="0.7ex">P</text>
  <text class="k_div_n" transform="translate(740,-150)" x="0" y="0"
   ><tspan class="var">k</tspan><tspan x="0">_</tspan
   ><tspan x="0" dy="1.7ex" class="var">n</tspan></text>
  <text class="var" x="650" y="50" dy="0.7ex">n</text>
  <g transform="translate(0,25)">
   <text x="100"  y="0" dy="0.7ex">1</text>
   <text x="200"  y="0" dy="0.7ex">2</text>
   <text x="300"  y="0" dy="0.7ex">3</text>
   <text x="400"  y="0" dy="0.7ex">4</text>
   <text x="500"  y="0" dy="0.7ex">5</text>
   <text x="600"  y="0" dy="0.7ex">6</text>
   <text x="700"  y="0" dy="0.7ex">7</text>
   <text x="800"  y="0" dy="0.7ex">8</text>
   <text x="900"  y="0" dy="0.7ex">9</text>
   <text x="1000" y="0" dy="0.7ex">10</text>
   <text x="1100" y="0" dy="0.7ex">11</text>
   <text x="1200" y="0" dy="0.7ex">12</text>
  </g>
  <g transform="translate(-40,0)">
   <text x="0" y="0"     dy="0.7ex">0.0</text>
   <text x="0" y="-100"  dy="0.7ex">0.1</text>
   <text x="0" y="-200"  dy="0.7ex">0.2</text>
   <text x="0" y="-300"  dy="0.7ex">0.3</text>
   <text x="0" y="-400"  dy="0.7ex">0.4</text>
   <text x="0" y="-500"  dy="0.7ex">0.5</text>
   <text x="0" y="-600"  dy="0.7ex">0.6</text>
   <text x="0" y="-700"  dy="0.7ex">0.7</text>
   <text x="0" y="-800"  dy="0.7ex">0.8</text>
   <text x="0" y="-900"  dy="0.7ex">0.9</text>
   <text x="0" y="-1000" dy="0.7ex">1.0</text>
  </g>
  <g transform="translate(1260,0)">
   <text x="0" y="0"     dy="0.7ex">0%</text>
   <text x="0" y="-100"  dy="0.7ex">10%</text>
   <text x="0" y="-200"  dy="0.7ex">20%</text>
   <text x="0" y="-300"  dy="0.7ex">30%</text>
   <text x="0" y="-400"  dy="0.7ex">40%</text>
   <text x="0" y="-500"  dy="0.7ex">50%</text>
   <text x="0" y="-600"  dy="0.7ex">60%</text>
   <text x="0" y="-700"  dy="0.7ex">70%</text>
   <text x="0" y="-800"  dy="0.7ex">80%</text>
   <text x="0" y="-900"  dy="0.7ex">90%</text>
   <text x="0" y="-1000" dy="0.7ex">100%</text>
  </g>
<!-- BEGIN_DYNAMIC_MAIN -->
  <g class="probability" transform="translate(100,-1000)">
   <use xlink:href="#probability"/>
   <text transform="scale(0.8,1)" x="0" y="-20" dy="-2ex" font-size="33"
    ><tspan>&#160;</tspan><tspan x="0">&#160;</tspan
    ><tspan x="0" dy="2ex">1</tspan></text>
  </g>
  <g class="k_div_n" transform="translate(100,0)">
   <use xlink:href="#k_div_n"/>
   <text x="0.5ex" y="-5"><tspan class="var">k</tspan><tspan>=0</tspan></text>
  </g>
  <g class="probability" transform="translate(200,-500)">
   <use xlink:href="#probability"/>
   <text transform="scale(0.8,1)" x="0" y="-20" dy="-2ex" font-size="60"
    ><tspan>1</tspan><tspan x="0">_</tspan
    ><tspan x="0" dy="2ex">2</tspan></text>
  </g>
  <g class="k_div_n" transform="translate(200,0)">
   <use xlink:href="#k_div_n"/>
   <text x="0.5ex" y="-5"><tspan class="var">k</tspan><tspan>=0</tspan></text>
  </g>
  <g class="probability" transform="translate(300,-500)">
   <use xlink:href="#probability"/>
   <text transform="scale(0.8,1)" x="0" y="-20" dy="-2ex" font-size="60"
    ><tspan>3</tspan><tspan x="0">_</tspan
    ><tspan x="0" dy="2ex">6</tspan></text>
  </g>
  <g class="k_div_n" transform="translate(300,-333)">
   <use xlink:href="#k_div_n"/>
   <text x="0.5ex" y="-5"><tspan class="var">k</tspan><tspan>=1</tspan></text>
  </g>
  <g class="probability" transform="translate(400,-458)">
   <use xlink:href="#probability"/>
   <text transform="scale(0.8,1)" x="0" y="-20" dy="-2ex" font-size="60"
    ><tspan>11</tspan><tspan x="0">__</tspan
    ><tspan x="0" dy="2ex">24</tspan></text>
  </g>
  <g class="k_div_n" transform="translate(400,-250)">
   <use xlink:href="#k_div_n"/>
   <text x="0.5ex" y="-5"><tspan class="var">k</tspan><tspan>=1</tspan></text>
  </g>
  <g class="probability" transform="translate(500,-433)">
   <use xlink:href="#probability"/>
   <text transform="scale(0.8,1)" x="0" y="-20" dy="-2ex" font-size="60"
    ><tspan>52</tspan><tspan x="0">___</tspan
    ><tspan x="0" dy="2ex">120</tspan></text>
  </g>
  <g class="k_div_n" transform="translate(500,-400)">
   <use xlink:href="#k_div_n"/>
   <text x="0.5ex" y="-5"><tspan class="var">k</tspan><tspan>=2</tspan></text>
  </g>
  <g class="probability" transform="translate(600,-428)">
   <use xlink:href="#probability"/>
   <text transform="scale(0.8,1)" x="0" y="-20" dy="-2ex" font-size="60"
    ><tspan>308</tspan><tspan x="0">___</tspan
    ><tspan x="0" dy="2ex">720</tspan></text>
  </g>
  <g class="k_div_n" transform="translate(600,-333)">
   <use xlink:href="#k_div_n"/>
   <text x="0.5ex" y="-5"><tspan class="var">k</tspan><tspan>=2</tspan></text>
  </g>
  <g class="probability" transform="translate(700,-414)">
   <use xlink:href="#probability"/>
   <text transform="scale(0.8,1)" x="0" y="-20" dy="-2ex" font-size="50"
    ><tspan>2088</tspan><tspan x="0">____</tspan
    ><tspan x="0" dy="2ex">5040</tspan></text>
  </g>
  <g class="k_div_n" transform="translate(700,-286)">
   <use xlink:href="#k_div_n"/>
   <text x="0.5ex" y="-5"><tspan class="var">k</tspan><tspan>=2</tspan></text>
  </g>
  <g class="probability" transform="translate(800,-410)">
   <use xlink:href="#probability"/>
   <text transform="scale(0.8,1)" x="0" y="-20" dy="-2ex" font-size="40"
    ><tspan>16524</tspan><tspan x="0">_____</tspan
    ><tspan x="0" dy="2ex">40320</tspan></text>
  </g>
  <g class="k_div_n" transform="translate(800,-375)">
   <use xlink:href="#k_div_n"/>
   <text x="0.5ex" y="-5"><tspan class="var">k</tspan><tspan>=3</tspan></text>
  </g>
  <g class="probability" transform="translate(900,-406)">
   <use xlink:href="#probability"/>
   <text transform="scale(0.8,1)" x="0" y="-20" dy="-2ex" font-size="33"
    ><tspan>147312</tspan><tspan x="0">______</tspan
    ><tspan x="0" dy="2ex">362880</tspan></text>
  </g>
  <g class="k_div_n" transform="translate(900,-333)">
   <use xlink:href="#k_div_n"/>
   <text x="0.5ex" y="-5"><tspan class="var">k</tspan><tspan>=3</tspan></text>
  </g>
  <g class="probability" transform="translate(1000,-399)">
   <use xlink:href="#probability"/>
   <text transform="scale(0.8,1)" x="0" y="-20" dy="-2ex" font-size="28"
    ><tspan>1446768</tspan><tspan x="0">_______</tspan
    ><tspan x="0" dy="2ex">3628800</tspan></text>
  </g>
  <g class="k_div_n" transform="translate(1000,-300)">
   <use xlink:href="#k_div_n"/>
   <text x="0.5ex" y="-5"><tspan class="var">k</tspan><tspan>=3</tspan></text>
  </g>
  <g class="probability" transform="translate(1100,-398)">
   <use xlink:href="#probability"/>
   <text transform="scale(0.8,1)" x="0" y="-20" dy="-2ex" font-size="25"
    ><tspan>15903360</tspan><tspan x="0">________</tspan
    ><tspan x="0" dy="2ex">39916800</tspan></text>
  </g>
  <g class="k_div_n" transform="translate(1100,-364)">
   <use xlink:href="#k_div_n"/>
   <text x="0.5ex" y="-5"><tspan class="var">k</tspan><tspan>=4</tspan></text>
  </g>
  <g class="probability" transform="translate(1200,-396)">
   <use xlink:href="#probability"/>
   <text transform="scale(0.8,1)" x="0" y="-20" dy="-2ex" font-size="22"
    ><tspan>189452160</tspan><tspan x="0">_________</tspan
    ><tspan x="0" dy="2ex">479001600</tspan></text>
  </g>
  <g class="k_div_n" transform="translate(1200,-333)">
   <use xlink:href="#k_div_n"/>
   <text x="0.5ex" y="-5"><tspan class="var">k</tspan><tspan>=4</tspan></text>
  </g>
<!--   END_DYNAMIC_MAIN -->
 </g>
</svg>
<!-- Please retain this and other comments, which contain Python code to generate this SVG. """
import re, math
def fmt(string): ## string.format(**vars()) using tags {expression!format} by CMG Lee
 def f(tag): i_sep = tag.rfind('!'); return (re.sub('\.0+$', '', str(eval(tag[1:-1])))
  if (i_sep < 0) else ('{:%s}' % tag[i_sep + 1:-1]).format(eval(tag[1:i_sep])))
 return (re.sub(r'(?<!{){[^{}]+}', lambda m:f(m.group()), string)
         .replace('{{', '{').replace('}}', '}'))
def append(obj, string): return obj.append(fmt(string))
def format_tab(*arg): return '\t'.join([str(el) for el in (arg if len(arg) > 1 else arg[0])])
def tabbify(cellss, separator='|'):
 cellpadss = [list(rows) + [''] * (len(max(cellss, key=len)) - len(rows)) for rows in cellss]
 fmts = ['%%%ds' % (max([len(str(cell)) for cell in cols])) for cols in zip(*cellpadss)]
 return '\n'.join([separator.join(fmts) % tuple(rows) for rows in cellpadss])
def roundm(x, multiple=1):
 try: x[0]; return [roundm(element, multiple) for element in x] ## x[0] checks if x is iterable
 except:    return int(math.floor(float(x) / multiple + 0.5)) * multiple

def compute_x(x): return roundm( 100  * x)
def compute_y(y): return roundm(-1000 * y)

datass = [[int(field.strip()) for field in fields.split()] for fields in '''\
1 0 1
2 0 1
3 1 3
4 1 11
5 2 52
6 2 308
7 2 2088
8 3 16524
9 3 147312
10 3 1446768
11 4 15903360
12 4 189452160
'''.strip().split('\n')]
# print(tabbify(datass))
(out_defs, out_mains) = ([], [])

# graphs = [
 # {'id':'k_div_n', 'func':lambda 
# ]
for (n, k, numerator) in datass:
 k_div_n       = float(k) / n
 denominator   = math.factorial(n)
 probability   = float(numerator) / denominator
 y_probability = compute_y(probability)
 y_k_div_n     = compute_y(k_div_n)
 x             = compute_x(n)
 out_numerator = '&#160;' if n == 1 else numerator
 over          = '&#160;' if n == 1 else re.sub(r'.', r'_', str(denominator))
 font_size     = min(60, roundm(200 / len(over)))
 print(x, k_div_n, y_k_div_n, y_probability, probability, numerator, denominator)
 append(out_mains, '''\
  <g class="probability" transform="translate({x},{y_probability})">
   <use xlink:href="#probability"/>
   <text transform="scale(0.8,1)" x="0" y="-20" dy="-2ex" font-size="{font_size}"
    ><tspan>{out_numerator}</tspan><tspan x="0">{over}</tspan
    ><tspan x="0" dy="2ex">{denominator}</tspan></text>
  </g>
  <g class="k_div_n" transform="translate({x},{y_k_div_n})">
   <use xlink:href="#k_div_n"/>
   <text x="0.5ex" y="-5"><tspan class="var">k</tspan><tspan>={k}</tspan></text>
  </g>''')

out_p = 'width="100%" height="100%" viewBox="-85 -1050 1400 1120"'

## Compile everything into an .svg file
myself   = open(__file__, 'r').read() ## the contents of this very file
file_out = open(__file__[:__file__.rfind('.')] + '.svg', 'w') ## *.* -> *.svg
try: ## use try/finally so that file is closed even if write fails
 file_out.write('''<?xml version="1.0" encoding="utf-8"?><!%s%s
%s%s%s\n%s%s\n%s%s''' % ('-', '-', ## because SVG comments cannot have 2 consecutive '-'s
  myself[:myself.find('width',myself.find('<svg'))], ## assume width specified before height/viewBox
  out_p, ## replace SVG width/height/viewBox with {out_p} & dynamic SVG blocks with {out*s} contents
  myself[myself.find ('>',myself.find('<svg')):
         myself.find ('\n',myself.find('BEGIN_'+'DYNAMIC_DEFS'))], '\n'.join(out_defs),
  myself[myself.rfind('\n',0,myself.find('END_'+'DYNAMIC_DEFS')):
         myself.find ('\n',myself.find('BEGIN_'+'DYNAMIC_MAIN'))], '\n'.join(out_mains),
  myself[myself.rfind('\n',0,myself.find('END_'+'DYNAMIC_MAIN')):]))
finally:
 file_out.close()

## SVG-Python near-polyglot framework version 3 by CMG Lee (March 2018) -->
